package com.homin.or.domain.hman.discount;

import org.junit.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.StringJoiner;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class PurchaseTest {


    @FunctionalInterface
    interface CouponCreator {
        Coupon create(BigDecimal maxDiscountAmount, BigDecimal minimumBuyAmount, String cpnDcntMthdCd, BigDecimal dcntVlue);
    }

    class PurchaseOrder {
        BigDecimal orderQuantity;
        BigDecimal price;

        public PurchaseOrder(BigDecimal orderQuantity, BigDecimal price) {
            this.orderQuantity = orderQuantity;
            this.price = price;
        }

        public BigDecimal getOrderQuantity() {
            return orderQuantity;
        }

        public BigDecimal getPrice() {
            return price;
        }
    }

    class Coupon {

        BigDecimal maxDiscountAmount;
        BigDecimal minimumBuyAmount;
        String cpnDcntMthdCd;       // 01: 정액, 02 : 정률
        BigDecimal dcntVlue;        // 할인가 or 할인률

        public Coupon(BigDecimal maxDiscountAmount, BigDecimal minimumBuyAmount, String cpnDcntMthdCd, BigDecimal dcntVlue) {

            this.maxDiscountAmount = maxDiscountAmount;
            this.minimumBuyAmount = minimumBuyAmount;
            this.cpnDcntMthdCd = cpnDcntMthdCd;
            this.dcntVlue = dcntVlue;
        }

        public BigDecimal calculateFare(DiscountFare discountFare, PurchaseOrder purchaseOrder) {
            return discountFare.calculateDiscountFare.apply(this, purchaseOrder);
        }

        public BigDecimal percentFare(PurchaseOrder purchaseOrder) {
            return purchaseOrder.getPrice().multiply(purchaseOrder.orderQuantity).multiply(BigDecimal.ONE.subtract(this.dcntVlue.scaleByPowerOfTen(-2)));
        }

        public BigDecimal amountFare(PurchaseOrder purchaseOrder) {
            return purchaseOrder.getPrice().multiply(purchaseOrder.orderQuantity).subtract(this.dcntVlue);
        }

        @Override
        public String toString() {
            return new StringJoiner(", ", Coupon.class.getSimpleName() + "[", "]")
                    .add("maxDiscountAmount=" + maxDiscountAmount)
                    .add("minimumBuyAmount=" + minimumBuyAmount)
                    .add("cpnDcntMthdCd='" + cpnDcntMthdCd + "'")
                    .add("dcntVlue=" + dcntVlue)
                    .toString();
        }
    }

    enum DiscountFare {

        PERCENT(Coupon::percentFare, coupon -> "01".equals(coupon.cpnDcntMthdCd)),
        DISCOUNT(Coupon::amountFare, coupon -> "02".equals(coupon.cpnDcntMthdCd));

        BiFunction<Coupon, PurchaseOrder, BigDecimal> calculateDiscountFare;
        Predicate<Coupon> isDiscountMethod;

        public static DiscountFare compareDiscountMethod(final Coupon coupon) {
            return Arrays.stream(DiscountFare.values())
                    .filter(discountRate -> discountRate.isDiscountMethod.test(coupon))
                    .findFirst()
                    .orElseThrow(() -> new NoSuchElementException("해당하는 DiscountRate 없습니다"));
        }

        DiscountFare(BiFunction<Coupon, PurchaseOrder, BigDecimal> calculateDiscountFare, Predicate<Coupon> isDiscountMethod) {
            this.calculateDiscountFare = calculateDiscountFare;
            this.isDiscountMethod = isDiscountMethod;
        }
    }


    @Test
    public void CouponTest() {

        final CouponCreator couponCreator = Coupon::new;
        Coupon couponPercent = couponCreator.create(BigDecimal.valueOf(100), BigDecimal.valueOf(10), "01", BigDecimal.valueOf(10));
        Coupon couponAmount = couponCreator.create(BigDecimal.valueOf(100), BigDecimal.valueOf(10), "02", BigDecimal.valueOf(10));

        BigDecimal percent = couponPercent.calculateFare(DiscountFare.compareDiscountMethod(couponPercent)
                ,new PurchaseOrder(BigDecimal.valueOf(1), BigDecimal.valueOf(1000)));
        System.out.println(percent);

        BigDecimal amount = couponAmount.calculateFare(DiscountFare.compareDiscountMethod(couponAmount)
                ,new PurchaseOrder(BigDecimal.valueOf(1), BigDecimal.valueOf(1000)));
        System.out.println(amount);


    }

}
